Slip-15


Q.1)WriteAjaxprogram tofetchsuggestionswhenisuseristypinginatextbox.(eglikegoogle
Suggestions.Hintcreatearrayofsuggestionsandmatchingstringwillbedisplayed).
Ans:



<!DOCTYPEhtml>
<html>
<head>
<title>AJAXAutoSuggestionsExample</title>
<script>
FunctionfetchSuggestions(str){
If(str.length==0){
Document.getElementById(“suggestions”).innerHTML=“”;
Return;
}
Varsuggestions=[“apple”,“banana”,“cherry”,“dates”,“elderberry”,“fig”,
“grape”,“honeydew”,“kiwi”,“lemon”];
Varmatches=[];
For(vari=0;i<suggestions.length;i++){
If(suggestions[i].toLowerCase().startsWith(str.toLowerCase())){
Matches.push(suggestions[i]);
}
}
If(matches.length>0){
Document.getElementById(“suggestions”).innerHTML=
matches.join(“<br>”);
}else{
Document.getElementById(“suggestions”).innerHTML=“No
suggestionsfound”;
}
}
</script>
</head>
<body>
<inputtype=”text”onkeyup=”fetchSuggestions(this.value)”>
<divid=”suggestions”></div>
</body>
</html>


Q.2)Createthefollowingdatasetinpython&Convertthecategoricalvaluesintonumeric
format.Apply
Theapriorialgorithm ontheabovedatasettogeneratethefrequentitemsetsandassociation
rules.Repeat
Theprocesswithdifferentmin_supvalues.
No|Company| model |year
1. Tata. Nexon. 2017
2. MG. Astor. 2021
3. Kia. Seltos. 2019
4. Hyundai. Creta. 2015
Ans:


Importpandasaspd
#Createthedataset
Data={‘No’:[1,2,3,4],
‘Company’:[‘Tata’,‘MG’,‘Kia’,‘Hyundai’],
‘Model’:[‘Nexon’,‘Astor’,‘Seltos’,‘Creta’],
‘Year’:[2017,2021,2019,2015]}
Df=pd.DataFrame(data)
#Convertcategoricalvaluesintonumericformat
Df[‘Company’]=pd.Categorical(df[‘Company’])
Df[‘Model’]=pd.Categorical(df[‘Model’])
Df[‘Company’]=df[‘Company’].cat.codes
Df[‘Model’]=df[‘Model’].cat.codes
Print(df)
From mlxtend.frequent_patternsimportapriori
From mlxtend.frequent_patternsimportassociation_rules
#Generatefrequentitemsetswithmin_sup=0.5
Frequent_itemsets=apriori(df,min_support=0.5,use_colnames=True)
Print(frequent_itemsets)
#Generateassociationruleswithmin_threshold=0.7
Association_rules=association_rules(frequent_itemsets,metric=”confidence”,
min_threshold=0.7)
Print(association_rules)